/*
 *  Copyright (c) 2016 Rockchip Electronics Co. Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef __DPP_BUFFER_H__
#define __DPP_BUFFER_H__

#include <stddef.h>

#include "dpp_err.h"

/*
 * because buffer usage maybe unknown when ceva-xm4  is not started
 * buffer group may need to set a default group size limit
 */
#define SZ_1K           (1024)
#define SZ_2K           (SZ_1K*2)
#define SZ_4K           (SZ_1K*4)
#define SZ_8K           (SZ_1K*8)
#define SZ_16K          (SZ_1K*16)
#define SZ_32K          (SZ_1K*32)
#define SZ_64K          (SZ_1K*64)
#define SZ_128K         (SZ_1K*128)
#define SZ_256K         (SZ_1K*256)
#define SZ_512K         (SZ_1K*512)
#define SZ_1M           (SZ_1K*SZ_1K)
#define SZ_2M           (SZ_1M*2)
#define SZ_4M           (SZ_1M*4)
#define SZ_8M           (SZ_1M*8)
#define SZ_16M          (SZ_1M*16)
#define SZ_32M          (SZ_1M*32)
#define SZ_64M          (SZ_1M*64)
#define SZ_80M          (SZ_1M*80)
#define SZ_128M         (SZ_1M*128)

/*
 * DppBuffer module has several functions:
 *
 * 1. buffer get / put / reference management / external commit / get info.
 *    this part is the basic user interface for DppBuffer.
 *
 *    function:
 *
 *    dpp_buffer_get
 *    dpp_buffer_put
 *    dpp_buffer_inc_ref
 *    dpp_buffer_dec_ref
 *    dpp_buffer_commit
 *    dpp_buffer_info_get
 *
 * 2. user buffer working flow control abstraction.
 *    buffer should attach to certain group, and buffer mode control the buffer usage flow.
 *    this part is also a part of user interface.
 *
 *    function:
 *
 *    dpp_buffer_group_get
 *    dpp_buffer_group_normal_get
 *    dpp_buffer_group_limit_get
 *    dpp_buffer_group_put
 *    dpp_buffer_group_limit_config
 *
 * 3. buffer allocator management
 *    this part is for allocator on different os, it does not have user interface
 *    it will support normal buffer, Android ion buffer, Linux  buffer
 *    user can only use DppBufferType to choose.
 *
 */
typedef void* DppBuffer;
typedef void* DppBufferGroup;

/*
 * dpp buffer group support two work flow mode:
 *
 * normal flow: all buffer are generated by DPP
 *              under this mode, buffer pool is maintained internally
 *
 *              typical call flow:
 *
 *              dpp_buffer_group_get()          return A
 *              dpp_buffer_get(A)               return a    ref +1 -> used
 *              dpp_buffer_inc_ref(a)                       ref +1
 *              dpp_buffer_dec_ref(a)                       ref -1
 *              dpp_buffer_put(a)                           ref -1 -> unused
 *              dpp_buffer_group_put(A)
 *
 * commit flow: all buffer are commited out of DPP
 *              under this mode, buffers is commit by external api.
 *              normally DPP only use it but not generate it.
 *
 *              typical call flow:
 *
 *              ==== external allocator ====
 *              dpp_buffer_group_get()          return A
 *              dpp_buffer_commit(A, x)
 *              dpp_buffer_commit(A, y)
 *
 *              ======= internal user ======
 *              dpp_buffer_get(A)               return a
 *              dpp_buffer_get(A)               return b
 *              dpp_buffer_put(a)
 *              dpp_buffer_put(b)
 *
 *              ==== external allocator ====
 *              dpp_buffer_group_put(A)
 *
 *              NOTE: commit interface required group handle to record group information
 */

/*
 * dpp buffer group has two buffer limit mode: normal and limit
 *
 * normal mode: allows any buffer size and always general new buffer is no unused buffer
 *              is available.
 *              This mode normally use with normal flow and is used for table / stream buffer
 *
 * limit mode : restrict the buffer's size and count in the buffer group. if try to calloc
 *              buffer with different size or extra count it will fail.
 *              This mode normally use with commit flow and is used for frame buffer
 */

/*
 * NOTE: normal mode is recommanded to work with normal flow, working with limit  mode is not.
 *       limit  mode is recommanded to work with commit flow, working with normal mode is not.
 */
typedef enum {
  DPP_BUFFER_INTERNAL,
  DPP_BUFFER_EXTERNAL,
  DPP_BUFFER_MODE_BUTT,
} DppBufferMode;

/*
 * dpp buffer has two types:
 *
 * normal   : normal malloc buffer for unit test or hardware simulation
 * ion      : use ion device under Android/Linux, DppBuffer will encapsulte ion file handle
 */
typedef enum {
  DPP_BUFFER_TYPE_NORMAL,
  DPP_BUFFER_TYPE_ION,
  DPP_BUFFER_TYPE_BUTT,
} DppBufferType;

/*
 * DppBufferInfo variable's meaning is different in different DppBufferType
 *
 * DPP_BUFFER_TYPE_NORMAL
 *
 * ptr  - virtual address of normal malloced buffer
 * fd   - unused and set to -1
 *
 * DPP_BUFFER_TYPE_ION
 *
 * ptr  - virtual address of ion buffer in user space
 * hnd  - ion handle in user space
 * phys - physical address
 * fd   - ion buffer file handle for map / unmap
 *
 * TODO: to be implemented.
 */
typedef struct DppBufferInfo_t {
  DppBufferType   type;
  size_t          size;
  void            *ptr;
  void            *hnd;
  unsigned int    phys;
  int             fd;
} DppBufferInfo;

#define BUFFER_GROUP_SIZE_DEFAULT           (SZ_1M*80)

#define dpp_buffer_commit(...) \
        dpp_buffer_commit_with_tag(MODULE_TAG, __FUNCTION__, ## __VA_ARGS__)

#define dpp_buffer_get(...) \
        dpp_buffer_get_with_tag(MODULE_TAG, __FUNCTION__, ## __VA_ARGS__)

#define dpp_buffer_group_get_internal(...) \
        dpp_buffer_group_get(MODULE_TAG, __FUNCTION__, DPP_BUFFER_INTERNAL, ## __VA_ARGS__)

#define dpp_buffer_group_get_external(...) \
        dpp_buffer_group_get(MODULE_TAG, __FUNCTION__, DPP_BUFFER_EXTERNAL, ## __VA_ARGS__)

#ifdef __cplusplus
extern "C" {
#endif

/*
 * DppBuffer interface
 * these interface will change value of group and buffer so before calling functions
 * parameter need to be checked.
 */
DPP_RET dpp_buffer_commit_with_tag(const char *tag, const char *caller, DppBufferGroup group, DppBufferInfo *info);
DPP_RET dpp_buffer_get_with_tag(const char *tag, const char *caller, DppBufferGroup group, DppBuffer *buffer, size_t size);
DPP_RET dpp_buffer_put(DppBuffer buffer);
DPP_RET dpp_buffer_inc_ref(DppBuffer buffer);
DPP_RET dpp_buffer_dec_ref(DppBuffer buffer);


DPP_RET dpp_buffer_info_get(DppBuffer buffer, DppBufferInfo **info);
DPP_RET dpp_buffer_read(DppBuffer buffer, size_t offset, void *data, size_t size);
DPP_RET dpp_buffer_write(DppBuffer buffer, size_t offset, void *data, size_t size);
void *dpp_buffer_get_ptr(DppBuffer buffer);
unsigned int dpp_buffer_get_phys(DppBuffer buffer);
int     dpp_buffer_get_fd(DppBuffer buffer);
size_t  dpp_buffer_get_size(DppBuffer buffer);

DPP_RET dpp_buffer_group_get(const char *tag, const char *caller, DppBufferMode mode, DppBufferGroup *group, DppBufferType type);
DPP_RET dpp_buffer_group_put(DppBufferGroup group);
DPP_RET dpp_buffer_group_clear(DppBufferGroup group);
int dpp_buffer_group_unused(DppBufferGroup group);
DppBufferMode dpp_buffer_group_mode(DppBufferGroup group);
DppBufferType dpp_buffer_group_type(DppBufferGroup group);
unsigned int dpp_buffer_group_id(DppBufferGroup group);

/*
 * size  : 0 - no limit, other - max buffer size
 * count : 0 - no limit, other - max buffer count
 */
DPP_RET dpp_buffer_group_limit_config(DppBufferGroup group, size_t size, signed int count);

DPP_RET dpp_buffer_group_set_listener(DppBufferGroup group, void *listener);


#ifdef __cplusplus
}
#endif

#endif /*__DPP_BUFFER_H__*/
